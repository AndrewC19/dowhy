{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import dowhy, dowhy.datasets\n",
    "from dowhy import CausalModel\n",
    "import dowhy.causal_estimators.linear_regression_estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta=10\n",
    "data = dowhy.datasets.linear_dataset(beta=beta,\n",
    "                                 num_common_causes=2,\n",
    "                                 num_instruments=1,\n",
    "                                 num_frontdoor_variables=1,\n",
    "                                 num_samples=10000,\n",
    "                                 treatment_is_binary=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_model:Model to find the causal effect of treatment ['v0'] on outcome ['behavior']\n",
      "WARNING:dowhy.causal_identifier:If this is observed data (not from a randomized experiment), there might always be missing confounders. Causal effect cannot be identified perfectly.\n",
      "INFO:dowhy.causal_identifier:Continuing by ignoring these unobserved confounders because proceed_when_unidentifiable flag is True.\n",
      "INFO:dowhy.causal_identifier:Instrumental variables for treatment and outcome:['Z0']\n",
      "INFO:dowhy.causal_identifier:Frontdoor variables for treatment and outcome:['FD0']\n",
      "INFO:dowhy.causal_identifier:All common causes are observed. Causal effect can be identified.\n",
      "INFO:dowhy.causal_identifier:All common causes are observed. Causal effect can be identified.\n",
      "INFO:dowhy.causal_estimator:INFO: Using Two Stage Regression Estimator\n",
      "INFO:dowhy.causal_estimator:b: FD0~v0\n",
      "INFO:dowhy.causal_estimator:INFO: Using Linear Regression Estimator\n",
      "INFO:dowhy.causal_estimator:b: behavior~FD0+W1+Z0+W0+v0\n",
      "INFO:dowhy.causal_estimator:INFO: Using Linear Regression Estimator\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['v0', 'U', 'behavior'] set() False False\n",
      "['v0', 'W0', 'behavior'] set() False False\n",
      "['v0', 'W1', 'behavior'] set() False False\n",
      "['v0', 'U', 'behavior'] [] False False\n",
      "['v0', 'W0', 'behavior'] [] False False\n",
      "['v0', 'W1', 'behavior'] [] False False\n",
      "['v0', 'U', 'behavior'] ('W0', 'W1', 'U') True False\n",
      "['v0', 'W0', 'behavior'] ('W0', 'W1', 'U') True False\n",
      "['v0', 'W1', 'behavior'] ('W0', 'W1', 'U') True False\n",
      "['v0', 'U', 'behavior'] ['W0', 'W1'] False False\n",
      "['v0', 'W0', 'behavior'] ['W0', 'W1'] True False\n",
      "['v0', 'W1', 'behavior'] ['W0', 'W1'] True False\n",
      "['v0', 'U', 'behavior'] ('W0', 'W1') False False\n",
      "['v0', 'W0', 'behavior'] ('W0', 'W1') True False\n",
      "['v0', 'W1', 'behavior'] ('W0', 'W1') True False\n",
      "['v0', 'U', 'behavior'] ['W0', 'W1'] False False\n",
      "['v0', 'W0', 'behavior'] ['W0', 'W1'] True False\n",
      "['v0', 'W1', 'behavior'] ['W0', 'W1'] True False\n",
      "['v0', 'U', 'behavior'] ('W0', 'U') True False\n",
      "['v0', 'W0', 'behavior'] ('W0', 'U') True False\n",
      "['v0', 'W1', 'behavior'] ('W0', 'U') False False\n",
      "['v0', 'U', 'behavior'] ['W0'] False False\n",
      "['v0', 'W0', 'behavior'] ['W0'] True False\n",
      "['v0', 'W1', 'behavior'] ['W0'] False False\n",
      "['v0', 'U', 'behavior'] ('W1', 'U') True False\n",
      "['v0', 'W0', 'behavior'] ('W1', 'U') False False\n",
      "['v0', 'W1', 'behavior'] ('W1', 'U') True False\n",
      "['v0', 'U', 'behavior'] ['W1'] False False\n",
      "['v0', 'W0', 'behavior'] ['W1'] False False\n",
      "['v0', 'W1', 'behavior'] ['W1'] True False\n",
      "['v0', 'U', 'behavior'] ('W0',) False False\n",
      "['v0', 'W0', 'behavior'] ('W0',) True False\n",
      "['v0', 'W1', 'behavior'] ('W0',) False False\n",
      "['v0', 'U', 'behavior'] ['W0'] False False\n",
      "['v0', 'W0', 'behavior'] ['W0'] True False\n",
      "['v0', 'W1', 'behavior'] ['W0'] False False\n",
      "['v0', 'U', 'behavior'] ('W1',) False False\n",
      "['v0', 'W0', 'behavior'] ('W1',) False False\n",
      "['v0', 'W1', 'behavior'] ('W1',) True False\n",
      "['v0', 'U', 'behavior'] ['W1'] False False\n",
      "['v0', 'W0', 'behavior'] ['W1'] False False\n",
      "['v0', 'W1', 'behavior'] ['W1'] True False\n",
      "['v0', 'U', 'behavior'] ('U',) True False\n",
      "['v0', 'W0', 'behavior'] ('U',) False False\n",
      "['v0', 'W1', 'behavior'] ('U',) False False\n",
      "['v0', 'U', 'behavior'] [] False False\n",
      "['v0', 'W0', 'behavior'] [] False False\n",
      "['v0', 'W1', 'behavior'] [] False False\n",
      "[['v0', 'FD0', 'behavior']]\n",
      "{'FD0'}\n",
      "FRONTDOOR....\n",
      "\n",
      "[['v0', 'FD0', 'behavior']]\n",
      "['v0', 'FD0', 'behavior'] ['FD0'] True False\n",
      "['v0', 'U', 'behavior', 'FD0'] set() False True\n",
      "['v0', 'W0', 'behavior', 'FD0'] set() False True\n",
      "['v0', 'W1', 'behavior', 'FD0'] set() False True\n",
      "['v0', 'U', 'behavior', 'FD0'] [] False True\n",
      "['v0', 'W0', 'behavior', 'FD0'] [] False True\n",
      "['v0', 'W1', 'behavior', 'FD0'] [] False True\n",
      "['FD0', 'v0', 'U', 'behavior'] set() False False\n",
      "['FD0', 'v0', 'W0', 'behavior'] set() False False\n",
      "['FD0', 'v0', 'W1', 'behavior'] set() False False\n",
      "['FD0', 'v0', 'U', 'behavior'] [] False False\n",
      "['FD0', 'v0', 'W0', 'behavior'] [] False False\n",
      "['FD0', 'v0', 'W1', 'behavior'] [] False False\n",
      "['FD0', 'v0', 'U', 'behavior'] ('W1', 'U', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ('W1', 'U', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ('W1', 'U', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ['W1', 'Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ['W1', 'Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ['W1', 'Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ('W1', 'U', 'Z0', 'W0') True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ('W1', 'U', 'Z0', 'W0') True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ('W1', 'U', 'Z0', 'W0') True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ['W1', 'Z0', 'W0'] False False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ['W1', 'Z0', 'W0'] True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ['W1', 'Z0', 'W0'] True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ('W1', 'U', 'Z0', 'v0') True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ('W1', 'U', 'Z0', 'v0') True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ('W1', 'U', 'Z0', 'v0') True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ['W1', 'Z0', 'v0'] True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ['W1', 'Z0', 'v0'] True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ['W1', 'Z0', 'v0'] True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ('W1', 'U', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ('W1', 'U', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ('W1', 'U', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ['W1', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ['W1', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ['W1', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ('W1', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ('W1', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ('W1', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ['W1', 'Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ['W1', 'Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ['W1', 'Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ('U', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ('U', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ('U', 'Z0', 'W0', 'v0') True False\n",
      "['FD0', 'v0', 'U', 'behavior'] ['Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W0', 'behavior'] ['Z0', 'W0', 'v0'] True False\n",
      "['FD0', 'v0', 'W1', 'behavior'] ['Z0', 'W0', 'v0'] True False\n",
      "Estimand type: nonparametric-ate\n",
      "\n",
      "### Estimand : 1\n",
      "Estimand name: backdoor1 (Default)\n",
      "Estimand expression:\n",
      "  d                               \n",
      "─────(Expectation(behavior|W0,W1))\n",
      "d[v₀]                             \n",
      "Estimand assumption 1, Unconfoundedness: If U→{v0} and U→behavior then P(behavior|v0,W0,W1,U) = P(behavior|v0,W0,W1)\n",
      "\n",
      "### Estimand : 2\n",
      "Estimand name: iv\n",
      "Estimand expression:\n",
      "Expectation(Derivative(behavior, [Z0])*Derivative([v0], [Z0])**(-1))\n",
      "Estimand assumption 1, As-if-random: If U→→behavior then ¬(U →→{Z0})\n",
      "Estimand assumption 2, Exclusion: If we remove {Z0}→{v0}, then ¬({Z0}→behavior)\n",
      "\n",
      "### Estimand : 3\n",
      "Estimand name: frontdoor\n",
      "Estimand expression:\n",
      "Expectation(Derivative(behavior, [FD0])*Derivative([FD0], [v0]))\n",
      "Estimand assumption 1, Full-mediation: FD0 intercepts (blocks) all directed paths from v0 to b,e,h,a,v,i,o,r.\n",
      "Estimand assumption 2, First-stage-unconfoundedness: If U→{v0} and U→{FD0} then P(FD0|v0,U) = P(FD0|v0)\n",
      "Estimand assumption 3, Second-stage-unconfoundedness: If U→{FD0} and U→behavior then P(behavior|FD0, v0, U) = P(behavior|FD0, v0)\n",
      "\n",
      "*** Causal Estimate ***\n",
      "\n",
      "## Identified estimand\n",
      "Estimand type: nonparametric-ate\n",
      "\n",
      "### Estimand : 1\n",
      "Estimand name: frontdoor\n",
      "Estimand expression:\n",
      "Expectation(Derivative(behavior, [FD0])*Derivative([FD0], [v0]))\n",
      "Estimand assumption 1, Full-mediation: FD0 intercepts (blocks) all directed paths from v0 to b,e,h,a,v,i,o,r.\n",
      "Estimand assumption 2, First-stage-unconfoundedness: If U→{v0} and U→{FD0} then P(FD0|v0,U) = P(FD0|v0)\n",
      "Estimand assumption 3, Second-stage-unconfoundedness: If U→{FD0} and U→behavior then P(behavior|FD0, v0, U) = P(behavior|FD0, v0)\n",
      "\n",
      "## Realized estimand\n",
      "(b: FD0~v0)*(b: behavior~FD0+W1+Z0+W0+v0)\n",
      "Target units: ate\n",
      "\n",
      "## Estimate\n",
      "Mean value: 18.37613946628019\n",
      "\n",
      "16.97537509743622 18.37613946628019\n",
      "Estimand type: nonparametric-ate\n",
      "\n",
      "### Estimand : 1\n",
      "Estimand name: backdoor1 (Default)\n",
      "Estimand expression:\n",
      "  d                               \n",
      "─────(Expectation(behavior|W0,W1))\n",
      "d[v₀]                             \n",
      "Estimand assumption 1, Unconfoundedness: If U→{v0} and U→behavior then P(behavior|v0,W0,W1,U) = P(behavior|v0,W0,W1)\n",
      "\n",
      "### Estimand : 2\n",
      "Estimand name: iv\n",
      "Estimand expression:\n",
      "Expectation(Derivative(behavior, [Z0])*Derivative([v0], [Z0])**(-1))\n",
      "Estimand assumption 1, As-if-random: If U→→behavior then ¬(U →→{Z0})\n",
      "Estimand assumption 2, Exclusion: If we remove {Z0}→{v0}, then ¬({Z0}→behavior)\n",
      "\n",
      "### Estimand : 3\n",
      "Estimand name: frontdoor\n",
      "Estimand expression:\n",
      "Expectation(Derivative(behavior, [FD0])*Derivative([FD0], [v0]))\n",
      "Estimand assumption 1, Full-mediation: FD0 intercepts (blocks) all directed paths from v0 to b,e,h,a,v,i,o,r.\n",
      "Estimand assumption 2, First-stage-unconfoundedness: If U→{v0} and U→{FD0} then P(FD0|v0,U) = P(FD0|v0)\n",
      "Estimand assumption 3, Second-stage-unconfoundedness: If U→{FD0} and U→behavior then P(behavior|FD0, v0, U) = P(behavior|FD0, v0)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data[\"df\"].rename(columns={'y':'behavior'}, inplace=True)\n",
    "model = CausalModel(\n",
    "    data=data['df'],\n",
    "    treatment=data[\"treatment_name\"],\n",
    "    outcome=\"behavior\",\n",
    "    graph=data[\"dot_graph\"].replace(\"y\", \"behavior\"),\n",
    "    proceed_when_unidentifiable=True,\n",
    "    test_significance=None\n",
    ")\n",
    "target_estimand = model.identify_effect(method_name=\"auto\")\n",
    "print(target_estimand)\n",
    "ate_estimate = model.estimate_effect(\n",
    "    identified_estimand=target_estimand,\n",
    "    method_name=\"frontdoor.two_stage_regression\",\n",
    "    test_significance=None,\n",
    "    method_params = {\n",
    "                                            'first_stage_model': dowhy.causal_estimators.linear_regression_estimator.LinearRegressionEstimator,\n",
    "                                            'second_stage_model': dowhy.causal_estimators.linear_regression_estimator.LinearRegressionEstimator\n",
    "                                        }\n",
    ")\n",
    "print(ate_estimate)\n",
    "true_ate = data[\"ate\"]\n",
    "print(true_ate, ate_estimate.value)\n",
    "print(target_estimand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "graph = 'digraph { U[label=\"Unobserved Confounders\"]; U->behavior;U->c1;U->c2;a1->behavior;a1->a2;a2->y;a1->c2;c2->y;c2->a2;c1->a1;c1->c2;c1->y;}'\n",
    "model = CausalModel(\n",
    "    data=data['df'],\n",
    "    treatment=[\"a1\"],\n",
    "    outcome=\"behavior\",\n",
    "    graph=graph,\n",
    "    proceed_when_unidentifiable=True,\n",
    "    test_significance=None,\n",
    "    logging_level=logging.DEBUG\n",
    ")\n",
    "print(model.identify_effect(method_name=\"auto\"))\n",
    "model.view_model()\n",
    "\n",
    "from IPython.display import Image, display\n",
    "display(Image(filename=\"causal_model.png\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simple_linear_outcome_model(X_train, output_train):\n",
    "    # The outcome is a linear function of the confounder\n",
    "    # The slope is 1,2 and the intercept is 3\n",
    "    return lambda X_train:  X_train[:,0] + 2*X_train[:,1] + 3\n",
    "#transf = [(\"permute\", {'permute_fraction':0.5}),(simple_linear_outcome_model, {}), (\"noise\", {'std_dev': 1} )]\n",
    "\n",
    "transf = [(\"permute\", {'permute_fraction':1})]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " \n",
    "ref_list = model.refute_estimate(target_estimand,\n",
    "                                    ate_estimate,\n",
    "                                    method_name=\"dummy_outcome_refuter\",\n",
    "                                    transformation_list = transf,\n",
    "                                    num_simulations = 2\n",
    "                                    )\n",
    "\n",
    "print(ref_list[0])\n",
    "print(ref_list[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=ref_list[1]\n",
    "df2['y'] = None\n",
    "print(df2.corr())\n",
    "\n",
    "gml = data[\"gml_graph\"].replace('\"y\"', '\"dummy_outcome\"')\n",
    "model = CausalModel(\n",
    "    data=df2,\n",
    "    treatment=data[\"treatment_name\"],\n",
    "    outcome=\"dummy_outcome\",\n",
    "    graph=gml,\n",
    "    proceed_when_unidentifiable=True,\n",
    "    test_significance=None\n",
    ")\n",
    "target_estimand = model.identify_effect()\n",
    "ate_estimate = model.estimate_effect(\n",
    "    identified_estimand=target_estimand,\n",
    "    method_name=\"backdoor.propensity_score_stratification\",\n",
    "    test_significance=None\n",
    ")\n",
    "print(true_ate, ate_estimate.value)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
